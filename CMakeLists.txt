##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 3 of the License, or
## any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program; If not, see <http://www.gnu.org/licenses/>.
##
## Copyright (C) 2016 Martin-Pierrat Louis (louismartinpierrat@gmail.com)
##



## CMAKE INITIALISATION

PROJECT(Engine)
CMAKE_MINIMUM_REQUIRED(VERSION 2.8.12)
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/cmake/)

## END CMAKE INITIALISATION



## PROJECT VERSION

SET(PROJECT_VERSION_MAJOR 2)
SET(PROJECT_VERSION_MINOR 3)
SET(PROJECT_VERSION_PATCH 1)
SET(PROJECT_VERSION_EXTRA 0)

SET(PROJECT_VERSION ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH})
SET(PROJECT_VERSION_FULL ${PROJECT_VERSION}.${PROJECT_VERSION_EXTRA})

## END PROJECT VERSION



## PROJECT CONFIGURATION

SET(PROJECT_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/include/)
SET(PROJECT_SOURCE_DIR ${CMAKE_SOURCE_DIR}/source/)

SET(RESOURCES_PATH ${CMAKE_SOURCE_DIR}/resources)

CONFIGURE_FILE(
    ${PROJECT_INCLUDE_DIR}/Engine/Version.hpp.in
    ${PROJECT_INCLUDE_DIR}/Engine/Version.hpp
    )

CONFIGURE_FILE(
    ${PROJECT_INCLUDE_DIR}/Engine/Configuration.hpp.in
    ${PROJECT_INCLUDE_DIR}/Engine/Configuration.hpp
    )

## END PROJECT CONFIGURATION



## PROJECT LANGUAGE

ENABLE_LANGUAGE(CXX)

## END PROJECT LANGUAGE



## FIND LIBRARY DEPENDENCY

FIND_PACKAGE(OpenGL REQUIRED)
FIND_PACKAGE(GLEW REQUIRED)
FIND_PACKAGE(Devil REQUIRED)
FIND_PACKAGE(Assimp REQUIRED)
FIND_PACKAGE(Log4cpp REQUIRED)
#FIND_PACKAGE(RapidXml REQUIRED)
FIND_PACKAGE(glm REQUIRED)
FIND_PACKAGE(OpenAL REQUIRED)

## END FIND LIBRARY DEPENDENCY


## PROJECT SOURCES FILES

FILE(GLOB_RECURSE PROJECT_SOURCE_FILES
    ${PROJECT_SOURCE_DIR}/*.cpp
    )

## END PROJECT SOURCES FILES



## PROJECT HEADERS FILES

FILE(GLOB_RECURSE PROJECT_INCLUDE_FILES
	${PROJECT_INCLUDE_DIR}/*.hpp
	)

## END PROJECT HEADERS FILES



## PROJECT INCLUDES DIRECTORIES

INCLUDE_DIRECTORIES(
    ${PROJECT_INCLUDE_DIR}
    ${OPENGL_INCLUDE_DIR}
    ${GLEW_INCLUDE_DIRS}
    ${ASSIMP_INCLUDE_DIR}
    ${DEVIL_INCLUDE_DIR}
    ${LOG4CPP_INCLUDE_DIR}
    ${GLM_INCLUDE_DIRS}
    ${OPENAL_INCLUDE_DIR}
    ${ALUT_INCLUDE_DIR}
    )

## END PROJECT INCLUDES DIRECTORIES



## PROJECT SETTINGS

## END PROJECT SETTINGS



## BINARY SETTINGS

ADD_LIBRARY(${CMAKE_PROJECT_NAME} SHARED ${PROJECT_SOURCE_FILES} ${PROJECT_INCLUDE_FILES})

## END BINARY SETTINGS



## COMPILATION SETTINGS

TARGET_COMPILE_DEFINITIONS(${CMAKE_PROJECT_NAME} PRIVATE BUILD_SHARED_LIBRARIES)

IF (CMAKE_COMPILER_IS_GNUCXX)

    TARGET_COMPILE_OPTIONS(${CMAKE_PROJECT_NAME} PRIVATE -Wctor-dtor-privacy)
    TARGET_COMPILE_OPTIONS(${CMAKE_PROJECT_NAME} PRIVATE -Wnoexcept)
    TARGET_COMPILE_OPTIONS(${CMAKE_PROJECT_NAME} PRIVATE -Wnon-virtual-dtor)
    #TARGET_COMPILE_OPTIONS(${CMAKE_PROJECT_NAME} PRIVATE -Weffc++)
    TARGET_COMPILE_OPTIONS(${CMAKE_PROJECT_NAME} PRIVATE -Wstrict-null-sentinel)
    TARGET_COMPILE_OPTIONS(${CMAKE_PROJECT_NAME} PRIVATE -Wold-style-cast)
    TARGET_COMPILE_OPTIONS(${CMAKE_PROJECT_NAME} PRIVATE -Woverloaded-virtual)
    TARGET_COMPILE_OPTIONS(${CMAKE_PROJECT_NAME} PRIVATE -Wno-pmf-conversions)
    TARGET_COMPILE_OPTIONS(${CMAKE_PROJECT_NAME} PRIVATE -Wsign-promo)
    #TARGET_COMPILE_OPTIONS(${CMAKE_PROJECT_NAME} PRIVATE -Wmultiple-inheritance)
    #TARGET_COMPILE_OPTIONS(${CMAKE_PROJECT_NAME} PRIVATE -Wvirtual-inheritance)
    TARGET_COMPILE_OPTIONS(${CMAKE_PROJECT_NAME} PRIVATE -Wdouble-promotion)
    TARGET_COMPILE_OPTIONS(${CMAKE_PROJECT_NAME} PRIVATE -Wmissing-include-dirs)
    TARGET_COMPILE_OPTIONS(${CMAKE_PROJECT_NAME} PRIVATE -Wswitch-default)
    #TARGET_COMPILE_OPTIONS(${CMAKE_PROJECT_NAME} PRIVATE -Wswitch-enum)
    #TARGET_COMPILE_OPTIONS(${CMAKE_PROJECT_NAME} PRIVATE -Wsuggest-attribute=pure)
    #TARGET_COMPILE_OPTIONS(${CMAKE_PROJECT_NAME} PRIVATE -Wsuggest-attribute=const)
    #TARGET_COMPILE_OPTIONS(${CMAKE_PROJECT_NAME} PRIVATE -Wsuggest-attribute=noreturn)
    TARGET_COMPILE_OPTIONS(${CMAKE_PROJECT_NAME} PRIVATE -Wsuggest-final-types)
    TARGET_COMPILE_OPTIONS(${CMAKE_PROJECT_NAME} PRIVATE -Wsuggest-final-methods)
    TARGET_COMPILE_OPTIONS(${CMAKE_PROJECT_NAME} PRIVATE -Wsuggest-override)
    #TARGET_COMPILE_OPTIONS(${CMAKE_PROJECT_NAME} PRIVATE -Wduplicated-cond)
    TARGET_COMPILE_OPTIONS(${CMAKE_PROJECT_NAME} PRIVATE -Wfloat-equal)
    TARGET_COMPILE_OPTIONS(${CMAKE_PROJECT_NAME} PRIVATE -Wzero-as-null-pointer-constant)
    TARGET_COMPILE_OPTIONS(${CMAKE_PROJECT_NAME} PRIVATE -Wuseless-cast)
    TARGET_COMPILE_OPTIONS(${CMAKE_PROJECT_NAME} PRIVATE -Wconversion)
    TARGET_COMPILE_OPTIONS(${CMAKE_PROJECT_NAME} PRIVATE -Wlogical-op)
    TARGET_COMPILE_OPTIONS(${CMAKE_PROJECT_NAME} PRIVATE -Wmissing-declarations)
    TARGET_COMPILE_OPTIONS(${CMAKE_PROJECT_NAME} PRIVATE -Winline)
    TARGET_COMPILE_OPTIONS(${CMAKE_PROJECT_NAME} PRIVATE -Wshadow)
    TARGET_COMPILE_OPTIONS(${CMAKE_PROJECT_NAME} PRIVATE -Wall)
    TARGET_COMPILE_OPTIONS(${CMAKE_PROJECT_NAME} PRIVATE -Wextra)
    TARGET_COMPILE_OPTIONS(${CMAKE_PROJECT_NAME} PRIVATE -std=c++14)
    TARGET_COMPILE_OPTIONS(${CMAKE_PROJECT_NAME} PRIVATE -g)
    TARGET_COMPILE_OPTIONS(${CMAKE_PROJECT_NAME} PRIVATE
        $<$<OR:$<CONFIG:Debug>,$<CONFIG:RelWithDebInfo>>:-g3>
        )

ENDIF()

## END COMPILATION SETTINGS



## LIBRARY SETTINGS

TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME}
    ${OPENGL_LIBRARIES}
    ${GLEW_LIBRARIES}
    ${ASSIMP_LIBRARY}
    ${LOG4CPP_LIBRARY}
    ${DEVIL_LIBRARIES}
    ${OPENAL_LIBRARY}
    ${ALUT_LIBRARY}
    )

IF (WIN32)
    TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME} wsock32 ws2_32)
ENDIF()

## END LIBRARY SETTINGS



## INSTALLATION SETTINGS

INSTALL(TARGETS ${CMAKE_PROJECT_NAME}
    RUNTIME DESTINATION bin
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib)

INSTALL(DIRECTORY ${PROJECT_INCLUDE_DIR}
    DESTINATION include
    FILES_MATCHING PATTERN "*.hpp"
    )

## END INSTALLATION SETTINGS



## DOXYGEN CONFIGURATION

FIND_PACKAGE(Doxygen QUIET)

IF (DOXYGEN_FOUND)

    CONFIGURE_FILE(
        ${CMAKE_SOURCE_DIR}/Doxyfile.in
        ${CMAKE_BINARY_DIR}/Doxyfile
        @ONLY)

    ADD_CUSTOM_TARGET(doc
        ${DOXYGEN_EXECUTABLE} ${CMAKE_BINARY_DIR}/Doxyfile
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/source
        COMMENT "Generating API documentation with Doxygen" VERBATIM
        )

ENDIF (DOXYGEN_FOUND)

## END DOXYGEN CONFIGURATION